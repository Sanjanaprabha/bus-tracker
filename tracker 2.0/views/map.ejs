<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Tracker</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body>
    <div id="map"></div>

    <footer>
        <p>Connected as: <span id="username"></span></p>
        <p>Location: <span id="location"></span></p>
        <p>Other Users: <span id="other-users"></span></p>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet-src.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
        // Retrieve username from localStorage
        const username = localStorage.getItem('username');
        document.getElementById('username').textContent = username;

        const socket = io();
        socket.emit("new-user", username);

        // Initialize the map
        const map = L.map("map").setView([0, 0], 16);

        // Add a tile layer to the map
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution: "Real-time Tracking"
        }).addTo(map);

        // Custom bus icon for markers
        const busIcon = L.icon({
            iconUrl: "/images/bus.svg",  // Ensure this file exists in public/images/
            iconSize: [40, 40],
            iconAnchor: [20, 40],
            popupAnchor: [0, -40],
        });

        // Store markers by user ID
        const markers = {};

        // Listen for incoming location data from the server
        socket.on("receive-location", (data) => {
            const { id, latitude, longitude, username } = data;

            // If a marker for this user already exists, update its position
            if (markers[id]) {
                markers[id].setLatLng([latitude, longitude]);
                markers[id].bindPopup(`${username}`).openPopup();
            } else {
                // Create a new marker for this user
                markers[id] = L.marker([latitude, longitude], { icon: busIcon })
                    .addTo(map)
                    .bindPopup(`${username}`)
                    .openPopup();
            }
        });

        // Remove markers when a user disconnects
        socket.on("user-disconnected", (id) => {
            if (markers[id]) {
                map.removeLayer(markers[id]);
                delete markers[id];
            }
        });

        // Fetch and display approximate location
        if (navigator.geolocation) {
            navigator.geolocation.watchPosition((position) => {
                const { latitude, longitude } = position.coords;
                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`)
                    .then(response => response.json())
                    .then(data => {
                        const location = data.display_name || "Unknown Location";
                        document.getElementById('location').textContent = location;
                        // Send location to the server
                        socket.emit("send-location", { latitude, longitude, username });
                    });
            });
        }

        // Display other connected users
        socket.on("user-list", (users) => {
            const otherUsers = Object.values(users).filter(user => user !== username).join(", ");
            document.getElementById('other-users').textContent = otherUsers;
        });
    </script>
</body>
</html>